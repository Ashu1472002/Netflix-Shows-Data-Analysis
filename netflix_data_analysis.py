# -*- coding: utf-8 -*-
"""Netflix_Data_Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KnAJJJ2IoKelHShueLQtCRZrqgX_QSF3

####Import necessary libraries
"""

pip install squarify

#Import necessary libraries
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
import numpy as np
import matplotlib.cm as cm
import plotly.express as px
import plotly.graph_objects as go
import squarify
from collections import Counter
from plotly.offline import init_notebook_mode,iplot
from wordcloud import WordCloud
from PIL import Image
from sklearn.preprocessing import MultiLabelBinarizer
import matplotlib.colors

import matplotlib
from matplotlib.colors import rgb2hex
cmap2 = matplotlib.colormaps['twilight'].resampled(20)
colors1= []
for i in range(cmap2.N):
    rgb= cmap2(i)[:4]
    colors1.append(rgb2hex(rgb))
    #print(rgb2hex(rgb))

# Set style
sns.set(style='whitegrid')

"""####Load Dataset"""

#Read data from the CSV file
df = pd.read_csv('/content/drive/MyDrive/netflix_titles.csv', low_memory = False)

#show data
df.head()

#Get more information about your data
df.info()

"""####Data Exploration and Analysis

"""

#Missing values in each column
df.isna().sum()

"""######count of data records in each column

"""

df.count()

"""##### Unique values for the type of shows on Netflix"""

df['type'].unique()

"""##### Unique values for the rating"""

df['rating'].unique()

"""#####Top Rated Shows"""

top_rated_shows = df[df['type'] == 'TV Show'].sort_values(by='rating', ascending=False).head(10)
print(top_rated_shows[['title', 'rating']])

"""#####Top Rated Movies"""

top_rated_shows = df[df['type'] == 'Movie'].sort_values(by='rating', ascending=False).head(10)
print(top_rated_shows[['title', 'rating']])

"""#####Worst rated TV Shows"""

top_rated_shows = df[df['type'] == 'TV Show'].sort_values(by='rating', ascending=True).head(10)
print(top_rated_shows[['title', 'rating']])

"""#####Worst Rated Movies"""

top_rated_shows = df[df['type'] == 'Movie'].sort_values(by='rating', ascending=True).head(10)
print(top_rated_shows[['title', 'rating']])

"""#####Content by country"""

content_by_country = df['country'].value_counts().head(10)
print(content_by_country)

"""####Data Visualization

##### Comparison between movies and tv shows
"""

no_of_shows = df[df['type']=='TV Show']
no_of_movies = df[df['type']=='Movie']

#plot
plt.figure(figsize = (5,4),dpi = 100)
ax = sns.countplot(x='type',data=df,linewidth=1,hue='type',palette='mako',edgecolor = 'black')
plt.xlabel("Content type on Netflix")
plt.ylabel("Count")
plt.title('Comparison between movies and tv shows')
plt.tight_layout()
plt.show()

"""##### Percent Distribution of movies and tv shows"""

ng_type = df['type'].value_counts().reset_index()
print(ng_type)

t = go.Pie(values=ng_type['count'],
           labels=ng_type['type'],
           marker=dict(colors=['LightSkyBlue','MediumPurple']),
           textfont=dict(size=18,family='Arial, sans-serif', color='black'))
layout = go.Layout(title='Percent Distribution of movies and tv shows',height=450,legend=dict(x=0.0,y=1.1))
fig = go.Figure(data=t,layout=layout)
iplot(fig)

"""#####Distribution of Ratings

"""

plt.figure(figsize = (13,7))
p_ratings = df['rating'].value_counts().head(10)
plt.pie(x = p_ratings,
        labels = p_ratings.index,
        colors = colors1,autopct = '%.0f%%',
        explode = [0.07 for i in p_ratings.index] ,
        startangle = 90,
        wedgeprops = {'linewidth':1,'edgecolor':'black'},
        shadow= True)
plt.title('Ratings Distribution',fontsize=17)
#plt.legend(loc = 'upper right',title = 'Ratings Types')
plt.show()

"""#####Ratings Analysis"""

plt.figure(figsize =(13,7))
sns.countplot(x='rating',data=df,palette='mako',hue='type',
              order=df['rating'].value_counts().index[0:10])
plt.xlabel('Ratings')
plt.ylabel('Count')
plt.legend()
plt.title('Netflix Content Rating Analysis',fontsize=20)
plt.show()

"""#####Movie Rating Analysis"""

plt.figure(figsize =(13,7))
sns.countplot(x='rating',data=no_of_movies,palette='mako',hue='rating',
              order=no_of_movies['rating'].value_counts().index[0:10],
              edgecolor='black',legend=False)
plt.xlabel('Movie Ratings')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.title('Movie Rating Analysis',fontsize=17)
plt.show()

"""#####TV Show Ratings Analysis"""

plt.figure(figsize =(13,7))
sns.countplot(x='rating',data=no_of_shows,palette='mako',hue='rating',
              order=no_of_shows['rating'].value_counts().index[0:10],
              edgecolor='black',legend=False)
plt.xlabel('TV Shows Ratings')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.title('TV Shows Rating Analysis',fontsize=17)
plt.show()

"""#####Movies vs TV Shows"""

fig,(ax0,ax1) = plt.subplots(1,2,figsize=(17,15))
np_movies = no_of_movies['rating'].value_counts().head(10)
np_shows = no_of_shows['rating'].value_counts().head(10)
plt.title('Ratings Distribution for Movies (Left) and TV shows (Right)',
          bbox={'facecolor':'0.9','pad':5},loc='center',fontsize=17)

ax0.pie(x=np_movies,
        labels=np_movies.index,
        colors=colors1,autopct='%.0f%%',
        explode=[0.05 for i in np_movies.index],
        startangle=160,wedgeprops={'linewidth':1,'edgecolor':'black'},
        shadow=True)


ax1.pie(x=np_shows,
        labels=np_shows.index,
        colors=colors1,autopct='%.0f%%',
        explode=[0.05 for i in np_shows.index],
        startangle=160,wedgeprops={'linewidth':1,'edgecolor':'black'},
        shadow=True)


plt.show()

"""#####Month when content can be released"""

n_date = df[['date_added']].dropna()
n_date['year'] = n_date['date_added'].apply(lambda x: x.split(', ')[-1])
n_date['month'] = n_date['date_added'].apply(lambda x: x.strip().split(' ')[0])
month_list = ['January','February','March','April','May','June','July','August','September','October','November','December']
g_df= n_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_list].T

#plot
plt.figure(figsize=(10,5),dpi=150)
plt.pcolor(g_df,cmap='Purples',edgecolors='white',linewidths=3)
plt.xticks(np.arange(0.8,len(g_df.columns),1),g_df.columns,fontsize=5)
plt.yticks(np.arange(0.8,len(g_df.index),1),g_df.index,fontsize=5)
cbar=plt.colorbar()
cbar.ax.tick_params(labelsize=7)
cbar.ax.minorticks_on()
plt.title('Month when content can be released',fontsize=17)
plt.show()

"""#####Top 10 Countries"""

df['country'] = df.country.dropna()
n_countries = df.country.value_counts().head(10)

#plot
plt.figure(figsize=(10,7))
plt.pie(x = n_countries,
        labels = n_countries.index,
        colors = colors1, autopct = '%.0f%%',
        explode = [0.05 for i in n_countries.index],
        startangle = 160,wedgeprops={'linewidth':1,'edgecolor':'Black'},shadow=True)
plt.title('Top 10 Countries',fontsize=17)
plt.show()

"""#####which country produces the most content"""

n_country = df['country'].dropna()
nc_country = pd.Series(dict(Counter(','.join(n_country).replace(' ,',',').replace(', ',',').split(',')))).sort_values(ascending= False)

#get top 15 countries
nc_country[:15]

"""#####plot top 15 countries"""

fig = plt.figure(figsize=(11,11))

t = nc_country[:15]
squarify.plot(sizes = t.values,label=t.index,color=sns.color_palette("rocket_r",n_colors=15),linewidth=4,text_kwargs = {'fontsize':10,'fontweight':'bold'})
plt.title("Top 15 content producing countries",fontsize=15)
plt.show()

"""#####Number of released movies by year"""

plt.figure(figsize=(10,8))
sns.countplot(x='release_year',data=no_of_movies,palette=colors1,hue='release_year',
              order=no_of_movies['release_year'].value_counts().index[0:15],
              edgecolor='black',legend=False)
plt.xlabel('Release Year')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.title('Number of released movies by year',fontsize=17)
plt.show()

"""#####Number of shows released by year"""

plt.figure(figsize=(10,8))
sns.countplot(x='release_year',data=no_of_shows,palette=colors1,
              hue='release_year',legend=False,
              order=no_of_shows['release_year'].value_counts().index[0:15])
plt.title('No of Released Shows by Year')
plt.xlabel('Release Year')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

"""#####Word cloud for Titles"""

n_title = df[df['country']=='India'].dropna()
#print(n_title['title'])
t = str(list(n_title['title'])).replace(',', '').replace('[', '').replace("'", '').replace(']', '').replace('.', '')
wc = WordCloud(background_color = 'white', width = 500,  height = 200,colormap='icefire', max_words = 150).generate(t)
plt.figure( figsize=(10,10))
plt.imshow(wc, interpolation = 'bilinear')
plt.axis('off')
plt.tight_layout(pad=0)
plt.title('Word Cloud of Show-Titles of India on Netflix')
plt.show()